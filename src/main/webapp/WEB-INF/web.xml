<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>spring+springmvc+mybatis+gradle</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
   
    <!-- 
    	 1、此监听器主要用于解决java.beans.Introspector导致的内存泄漏的问题
		 2、此监听器应该配置在web.xml中与Spring相关监听器中的第一个位置(也要在ContextLoaderListener的前面)
		 3、JDK中的java.beans.Introspector类的用途是发现Java类是否符合JavaBean规范如果有的框架或程序用到了Introspector类,那么就会启用一个系统级别的缓存,此缓存会
		　  存放一些曾加载并分析过的JavaBean的引用。当Web服务器关闭时,由于此缓存中存放着这些JavaBean的引用,所以垃圾回收器无法回收Web容器中的JavaBean对象,最后导致
		     内存变大。而org.springframework.web.util.IntrospectorCleanupListener就是专门用来处理Introspector内存泄漏问题的辅助类。IntrospectorCleanupListener会在
		   Web服务器停止时清理Introspector缓存,使那些Javabean能被垃圾回收器正确回收。Spring自身不会出现这种问题，因为Spring在加载并分析完一个类之后会马上刷新
		   JavaBeans Introspector缓存,这就保证Spring中不会出现这种内存泄漏的问题。但有些程序和框架在使用了JavaBeans Introspector之后,
		     没有进行清理工作(如Quartz,Struts),最后导致内存泄漏 
	-->
    <listener>
	    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener> 
    
    <!-- Spring监听器  如果不用context-param指定读取WEB-INF下面的applicationContext.xml -->  
    <listener>  
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
    </listener> 
    
     <!-- Spring和mybatis的配置文件 -->  
    <context-param>  
        <param-name>contextConfigLocation</param-name>  
        <param-value>classpath:spring-mybatis.xml</param-value>  
    </context-param>
	
    <!-- 编码过滤器 -->  
    <filter>
	    <filter-name>encoding</filter-name>
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
	        <param-name>encoding</param-name>
	        <param-value>UTF-8</param-value>
	    </init-param>
	</filter>
	<filter-mapping>
	    <filter-name>encoding</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- <filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter> -->
    
    
    <!-- 配置springmvc统一处理请求servlet -->
    <servlet>
	     <servlet-name>springmvc</servlet-name>
	     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	     <init-param>
	     	<!-- 使用contextConfigLocation代表从指定路径读取xml，此处代表从classpath，也就是src/main/resource中读取，如果是classPath*:..代表读取classpath和jar文件中 -->
	         <param-name>contextConfigLocation</param-name>
	         <param-value>classPath:spring-mvc.xml</param-value>
	     </init-param>
	</servlet>
	<servlet-mapping>
	     <servlet-name>springmvc</servlet-name>
	     <!-- 过滤所有请求，静态资源单独过滤 -->
	     <url-pattern>/</url-pattern>
	 </servlet-mapping>
	 
	 <error-page>
		<error-code>403</error-code>
		<location>/error/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/error/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>405</error-code>
		<location>/error/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/error/error.jsp</location>
	</error-page> 
</web-app>